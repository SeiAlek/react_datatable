{"version":3,"sources":["components/Emuns.tsx","helpers/getData.tsx","helpers/validators.ts","components/DataTable/THead.tsx","components/DataTable/PhoneCells.tsx","components/DataTable/TBody.tsx","components/DataTable/DataTable.tsx","components/Search/Search.tsx","components/Pagination/PaginationButton.tsx","components/Pagination/PaginationSettings.tsx","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["Columns","SortTypes","getData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","response","json","wrap","_context","prev","next","fetch","sent","abrupt","stop","_x","apply","this","arguments","getPhones","_ref2","_callee2","phonesFromServer","_context2","concat","process","required","name","value","minLength","length","THead","columnConfig","isSelectedAll","sortReverse","onSelectionChanged","onSort","react_default","createElement","type","checked","onChange","entries","map","_ref3","slicedToArray","field","className","key","title","onClick","sortType","aria-hidden","PhoneCells","allPhones","phone","setPhones","_useState","useState","_useState2","editPhoneId","setEditPhoneId","_useState3","_useState4","editFieldName","setEditFieldName","_useState5","_useState6","editFieldValue","setEditFieldValue","_useState7","_useState8","errorMessage","setErrorMessage","setDefaultState","document","removeEventListener","onKeyup","onButtonCancelClick","e","code","validateField","_columnConfig$name$va","validators","validator","filter","Boolean","join","saveChanges","preventDefault","toConsumableArray","id","objectSpread2","defineProperty","Fragment","keys","onDoubleClick","fieldName","fieldValue","addEventListener","onSubmit","autoFocus","currentTarget","onChangeFieldValue","onBlur","TBody","phones","selected","PhoneCells_PhoneCells","DataTable","THead_THead","TBody_TBody","Search","filterQuery","setFilterQuery","placeholder","target","PaginationButton","page","activePage","_ref$text","text","onPageChange","cn","is-current","aria-label","perPageOptions","PaginationSettings","perPage","setPerPage","Number","option","Pagination","total","changeActualPage","lastPage","Math","ceil","role","PaginationSettings_PaginationSettings","disabled","PaginationButton_PaginationButton","_columnConfig","Name","String","isSearchable","Age","isInteger","Snippet","App","sortField","setSortField","setSortType","_useState9","_useState10","setSortReverse","_useState11","_useState12","_useState13","_useState14","setIsSelectedAll","_useState15","_useState16","actualPage","setActualPage","_useState17","_useState18","_useState19","_useState20","setTotalPages","firstVisibleIndex","useEffect","loadPhones","preparedPhones","_preparedPhone","age","snippet","t0","filterPhones","useCallback","query","pattern","RegExp","trim","searchArea","forEach","prop","hasOwnProperty","match","sortPhones","sortedPhones","sort","b","localeCompare","reverse","filteredPhones","useMemo","paginatedPhones","slice","every","Search_Search","DataTable_DataTable","includes","Pagination_Pagination_Pagination","newPage","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.33a1575d.chunk.js","sourcesContent":["export enum Columns {\n  Name = 'name',\n  Age = 'age',\n  Snippet = 'snippet',\n}\n\nexport enum SortTypes {\n  String = 'string',\n  Number = 'number',\n}\n","const getData = async (url: string) => {\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n};\n\nexport const getPhones = async () => {\n  const phonesFromServer = await getData(`${process.env.REACT_APP_API_URL}/phones.json`);\n\n  return phonesFromServer;\n};\n","export const required: Validator = (name, value) => {\n  if (value) {\n    return '';\n  }\n\n  return `${name} is required`;\n};\n\nexport const url: Validator = (name, value) => {\n  // eslint-disable-next-line max-len\n  const URL_REGEXP = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n  return URL_REGEXP.test(value)\n    ? ''\n    : `${name} should be a valid URL`;\n};\n\nexport const minLength = (length: number): Validator => {\n  return (name, value) => {\n    return !value || (value.length >= length)\n      ? ''\n      : `${name} should have at least ${length} characters`;\n  };\n};\n\n\nexport const dataType = (type: string): Validator => {\n  return (name, value) => {\n    if (type === 'number') {\n      return !value || (Number.isInteger(+value))\n      ? ''\n      : `${name} should be ${type}`;\n    }\n\n    return !value || (typeof value === type)\n      ? ''\n      : `${name} should be ${type}`;\n  };\n}\n","import React from 'react';\n\ntype Props = {\n  columnConfig: ColumnConfig;\n  isSelectedAll: boolean;\n  sortReverse: boolean;\n  onSelectionChanged?: (id: string | null) => void;\n  onSort: (name: string, field: SortField) => void;\n};\n\nexport const THead: React.FC<Props> = ({\n  columnConfig,\n  isSelectedAll,\n  sortReverse,\n  onSelectionChanged,\n  onSort,\n}) => {\n  return (\n    <thead>\n      <tr>\n        {onSelectionChanged && (\n          <th>\n            <input\n              type=\"checkbox\"\n              checked={isSelectedAll}\n              onChange={() => onSelectionChanged(null)}\n            />\n          </th>\n        )}\n        {Object.entries(columnConfig).map(([name, field]) => (\n          <th\n            className=\"table-headers\"\n            key={field.title}\n            onClick={() => onSort(name, field)}\n          >\n            {field.title}\n            {!sortReverse && field.sortType && (\n              <span className=\"icon\">\n                <span className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n              </span>\n            )}\n            {sortReverse && field.sortType && (\n              <span className=\"icon\">\n                <span className=\"fas fa-angle-up\" aria-hidden=\"true\" />\n              </span>\n            )}\n          </th>\n        ))}\n      </tr>\n    </thead>\n  )\n}\n","import React, { useState } from 'react';\n\ntype Props = {\n  allPhones: Phone[];\n  phone: Phone;\n  columnConfig: ColumnConfig;\n  setPhones: (phones: Phone[]) => void;\n};\n\nexport const PhoneCells: React.FC<Props> = ({\n  allPhones,\n  phone,\n  columnConfig,\n  setPhones,\n}) => {\n  const [editPhoneId, setEditPhoneId] = useState('');\n  const [editFieldName, setEditFieldName] = useState('');\n  const [editFieldValue, setEditFieldValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const setEditingProps = (id: string, fieldName: string, fieldValue: string) => {\n    setEditPhoneId(id);\n    setEditFieldName(fieldName);\n    setEditFieldValue(fieldValue);\n    document.addEventListener('keyup', onKeyup);\n  };\n\n  const setDefaultState = () => {\n    setEditPhoneId('');\n    setEditFieldName('');\n    setEditFieldValue('');\n    document.removeEventListener('keyup', onKeyup);\n  }\n\n  const onChangeFieldValue = (e: React.FormEvent<HTMLInputElement>) => {\n    setErrorMessage('');\n    setEditFieldValue(e.currentTarget.value)\n  }\n\n  const onButtonCancelClick = () => {\n    setDefaultState();\n  }\n\n  const onKeyup = (e: KeyboardEvent) => {\n    if (e.code === 'Escape') {\n      setDefaultState();\n    }\n  }\n\n  const validateField = (name: keyof ColumnConfig, value: string) => {\n    const { validators = [] } = columnConfig[name];\n\n    return validators\n      .map((validator: Validator) => validator(name as string, value))\n      .filter(Boolean)\n      .join(', ');\n  };\n\n  const saveChanges = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const error = validateField(editFieldName, editFieldValue);\n\n    if (error) {\n      setErrorMessage(validateField(editFieldName, editFieldValue));\n\n      return;\n    }\n\n    setPhones([...allPhones.map(phone => {\n      return (phone.id === editPhoneId)\n        ? {\n          ...phone,\n          [editFieldName]: editFieldValue,\n        }\n        : phone;\n    })]);\n\n    setEditPhoneId('');\n    setEditFieldName('');\n    setEditFieldValue('');\n  };\n\n\n\n  return (\n    <>\n      {Object.keys(columnConfig).map((key) => (\n        <td\n          key={key}\n          onDoubleClick={() => setEditingProps(phone.id, key, phone[key])}\n        >\n          {(editPhoneId !== phone.id || editFieldName !== key) && phone[key]}\n          {(editPhoneId === phone.id && editFieldName === key) && (\n            <form onSubmit={e => saveChanges(e)} className=\"editing-form\">\n              <input\n                type=\"text\"\n                className=\"input is-info\"\n                value={editFieldValue}\n                autoFocus={true}\n                onChange={e => onChangeFieldValue(e)}\n                onBlur={e => saveChanges(e)}\n              />\n\n              <button\n                className=\"delete is-small\"\n                onClick={onButtonCancelClick}\n              />\n              {errorMessage && (\n                <article className=\"message is-danger\">\n                  <div className=\"message-body\">\n                    {errorMessage}\n                  </div>\n                </article>\n              )}\n            </form>\n          )}\n        </td>\n      ))}\n    </>\n  )\n}\n","import React, { useState } from 'react';\nimport { PhoneCells } from './PhoneCells';\n\ntype Props = {\n  phones: Phone[];\n  allPhones: Phone[];\n  columnConfig: ColumnConfig;\n  onSelectionChanged?: (id: string | null) => void;\n  setPhones: (phones: Phone[]) => void;\n};\n\nexport const TBody: React.FC<Props> = ({\n  phones,\n  allPhones,\n  columnConfig,\n  onSelectionChanged,\n  setPhones,\n}) => {\n\n\n  return (\n    <tbody>\n      {phones.map((phone) => (\n        <tr key={phone.id}>\n          {onSelectionChanged && (\n            <td>\n              <input\n                type=\"checkbox\"\n                checked={phone.selected}\n                onChange={() => onSelectionChanged(phone.id)}\n              />\n            </td>\n          )}\n          <PhoneCells\n            allPhones={allPhones}\n            phone={phone}\n            columnConfig={columnConfig}\n            setPhones={setPhones}\n          />\n        </tr>\n      ))}\n    </tbody>\n  )\n}\n","import React from 'react';\nimport { THead } from './THead';\nimport { TBody } from './TBody';\n\ntype Props = {\n  phones: Phone[];\n  allPhones: Phone[];\n  columnConfig: ColumnConfig;\n  isSelectedAll: boolean;\n  sortReverse: boolean;\n  onSelectionChanged?: (id: string | null) => void;\n  onSort: (name: string, field: SortField) => void;\n  setPhones: (phones: Phone[]) => void;\n}\n\nexport const DataTable: React.FC<Props> = ({\n  phones,\n  allPhones,\n  columnConfig,\n  isSelectedAll,\n  sortReverse,\n  onSelectionChanged,\n  onSort,\n  setPhones,\n}) => {\n  return (\n    <table className=\"table is-bordered is-striped is-fullwidth\">\n      <THead\n        columnConfig={columnConfig}\n        isSelectedAll={isSelectedAll}\n        sortReverse={sortReverse}\n        onSelectionChanged={onSelectionChanged}\n        onSort={onSort}\n      />\n      <TBody\n        phones={phones}\n        allPhones={allPhones}\n        columnConfig={columnConfig}\n        onSelectionChanged={onSelectionChanged}\n        setPhones={setPhones}\n      />\n    </table>\n  );\n}\n","import React from 'react';\n\ntype Props = {\n  filterQuery: string;\n  setFilterQuery: (value: string) => void;\n}\n\nexport const Search: React.FC<Props> = ({ filterQuery, setFilterQuery }) => {\n  return (\n    <div className=\"field\">\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          className=\"input is-info\"\n          placeholder=\"Text input\"\n          value={filterQuery}\n          onChange={e => setFilterQuery(e.target.value)}\n        />\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport cn from 'classnames';\n\ntype Props = {\n  page: number,\n  activePage: number,\n  text?: string,\n  onPageChange: (page: number) => void,\n}\n\nexport const PaginationButton: React.FC<Props> = ({\n  page,\n  activePage,\n  text = '',\n  onPageChange,\n}) => (\n  <li>\n    <button\n      type=\"button\"\n      className={cn('pagination-link', {'is-current': page === activePage})}\n      aria-label={`Goto page ${page}`}\n      onClick={() => onPageChange(page)}\n    >\n      {text || page}\n    </button>\n  </li>\n);\n","import React from 'react';\n\ntype Props = {\n  perPage: number,\n  setPerPage: (value: number) => void,\n}\n\nconst perPageOptions = [5, 10, 15, 20];\n\nexport const PaginationSettings: React.FC<Props> = ({ perPage, setPerPage }) => (\n  <div className=\"pagination-setting\">\n    <div className=\"select is-info  is-small\">\n      <select\n        value={perPage}\n        onChange={(e: React.ChangeEvent<HTMLSelectElement>) => setPerPage(Number(e.target.value))}\n      >\n        {perPageOptions.map(option => (\n          <option key={option}>{option}</option>\n        ))}\n      </select>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { PaginationButton } from './PaginationButton';\nimport { PaginationSettings } from './PaginationSettings';\n\nimport './Pagination.css';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  page: number,\n  changeActualPage: (value: number) => void,\n  setPerPage: (value: number) => void,\n}\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  page,\n  changeActualPage,\n  setPerPage,\n}) => {\n  const lastPage = Math.ceil(total / perPage);\n\n  return (\n    <nav className=\"pagination is-small is-full\" role=\"navigation\" aria-label=\"pagination\">\n      <PaginationSettings\n        perPage={perPage}\n        setPerPage={setPerPage}\n      />\n      <button\n        className=\"pagination-previous\"\n        disabled={page === 1}\n        onClick={() => changeActualPage(page - 1)}\n      >\n        Previous\n      </button>\n      <button\n        className=\"pagination-next\"\n        disabled={page === lastPage}\n        onClick={() => changeActualPage(page + 1)}\n      >\n        Next page\n      </button>\n\n      <ul className=\"pagination-list\">\n        {page > 2 && (\n          <>\n            <PaginationButton\n              page={1}\n              activePage={page}\n              onPageChange={() => changeActualPage(1)}\n            />\n            <span className=\"pagination__dots\">...</span>\n          </>\n        )}\n\n        {page > 1 && (\n          <PaginationButton\n            page={page - 1}\n            activePage={page}\n            onPageChange={() => changeActualPage(page - 1)}\n          />\n        )}\n\n        <PaginationButton\n          page={page}\n          activePage={page}\n          onPageChange={() => changeActualPage(page)}\n        />\n\n        {page < lastPage && (\n          <PaginationButton\n            page={page + 1}\n            activePage={page}\n            onPageChange={() => changeActualPage(page + 1)}\n          />\n        )}\n\n        {page < lastPage - 1 && (\n          <>\n            <span className=\"pagination__dots\">...</span>\n            <PaginationButton\n              page={lastPage}\n              activePage={page}\n              onPageChange={() => changeActualPage(lastPage)}\n            />\n          </>\n        )}\n      </ul>\n    </nav>\n  );\n}\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport './App.css';\n\nimport { getPhones, required, minLength, dataType } from './helpers';\nimport { DataTable } from './components/DataTable';\nimport { Columns, SortTypes } from './components/Emuns';\nimport { Search } from './components/Search';\nimport { Pagination } from \"./components/Pagination\";\n\nconst columnConfig: ColumnConfig = {\n  [Columns.Name]: {\n    title: 'Название',\n    sortType: SortTypes.String,\n    isSearchable: true,\n    validators: [required, minLength(5)],\n  },\n  [Columns.Age]: {\n    title: 'Возраст',\n    sortType: SortTypes.Number,\n    validators: [required, dataType('number')],\n  },\n  [Columns.Snippet]: {\n    title: 'Описание',\n    isSearchable: true,\n    validators: [required, minLength(10)],\n  }\n};\n\nfunction App() {\n  const [phones, setPhones] = useState<Phone[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [sortField, setSortField] = useState(Columns.Name);\n  const [sortType, setSortType] = useState(columnConfig[Columns.Name].sortType);\n  const [sortReverse, setSortReverse] = useState(false);\n  const [filterQuery, setFilterQuery] = useState('');\n  const [isSelectedAll, setIsSelectedAll] = useState(false);\n  const [actualPage, setActualPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n  const [totalPages, setTotalPages] = useState(1);\n\n  const firstVisibleIndex = ((actualPage - 1) * perPage) + 1;\n\n  useEffect(() => {\n    loadPhones();\n  }, []);\n\n  useEffect(() => {\n    setTotalPages(Math.ceil(phones.length / perPage));\n  }, [phones.length, perPage]);\n\n  useEffect(() => {\n    setActualPage(1);\n  }, [perPage]);\n\n  useEffect(() => {\n    setActualPage(1);\n  }, [filterQuery])\n\n  const loadPhones = async () => {\n    try {\n      const phonesFromServer = await getPhones();\n      const preparedPhones = phonesFromServer.map((phone: PhoneFromServer) => {\n        const preparedPhone: Phone = {\n          id: phone.id,\n          [Columns.Name]: phone.name,\n          [Columns.Age]: phone.age,\n          [Columns.Snippet]: phone.snippet,\n          selected: false,\n        };\n\n        return preparedPhone;\n      })\n      setPhones(preparedPhones);\n      setTotalPages(Math.ceil(preparedPhones.length / perPage));\n    } catch {\n      setErrorMessage('Oops! Something went wrong... :(');\n    }\n  }\n\n  const onSelectionChanged = (id: string | null) => {\n    if (id) {\n      setPhones(phones.map(phone => (phone.id === id)\n        ? {...phone, selected: !phone.selected}\n        : phone\n      ));\n\n      return;\n    }\n\n    setPhones(\n      phones.map(phone => (\n        (filteredPhones.includes(phone))\n          ? {...phone, selected: !isSelectedAll}\n          : phone\n      )\n    ));\n  }\n\n  const onSort = (key: string, field: SortField) => {\n    if (!field.sortType) {\n      return;\n    }\n\n    (key === sortField) ? setSortReverse(!sortReverse) : setSortReverse(false);\n\n    setSortField(key as Columns);\n    setSortType(field.sortType as SortTypes);\n  }\n\n  const changeActualPage = (newPage: number) => {\n    if (\n      newPage === actualPage\n      || newPage < 1\n      || newPage > Math.ceil(sortedPhones.length / perPage)\n    ) {\n      return;\n    }\n\n    setActualPage(newPage);\n  }\n\n  const filterPhones = useCallback(\n    ((phones: Phone[], query: string) => {\n      const pattern = new RegExp(filterQuery.trim(), 'i');\n\n      return phones.filter(phone => {\n        let searchArea = '';\n\n        Object.keys(phone).forEach((prop) => {\n           if (columnConfig[prop] && columnConfig[prop].hasOwnProperty('isSearchable')) {\n            searchArea += ` ${phone[prop]}`\n          }\n        });\n\n        return searchArea.match(pattern);\n      });\n    }),\n    [filterQuery],\n  )\n\n  const sortPhones = useCallback(\n    (phones: Phone[], sortType: string | undefined, sortReverse: boolean) => {\n      const sortedPhones = [...phones];\n\n      if (sortType === SortTypes.String) {\n        sortedPhones.sort((a, b) => (a[sortField] as string).localeCompare(b[sortField] as string));\n     }\n\n      if (sortType === SortTypes.Number) {\n        sortedPhones.sort((a, b) => (a[sortField] as number) - (b[sortField] as number));\n      }\n\n      return (sortReverse) ? sortedPhones.reverse() : sortedPhones;\n    },\n    [sortField],\n  );\n\n  const filteredPhones = useMemo(\n    () => filterPhones(phones, filterQuery),\n    [filterPhones, phones, filterQuery],\n  );\n  const sortedPhones = useMemo(\n    () => sortPhones(filteredPhones, sortType, sortReverse),\n    [sortPhones, filteredPhones, sortType, sortReverse],\n  );\n  const paginatedPhones = sortedPhones.slice(firstVisibleIndex - 1, firstVisibleIndex + perPage - 1);\n\n  useEffect(() => {\n    setIsSelectedAll(filteredPhones.length > 0 && filteredPhones.every(phone => phone.selected));\n  }, [filteredPhones, phones, filterQuery])\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title\">\n          React Datatable\n        </h1>\n        {errorMessage && (\n          <div className=\"message is-danger\">\n            <div className=\"message-header\">\n              Error\n            </div>\n            <div className=\"message-body\">\n              {errorMessage}\n            </div>\n          </div>\n        )}\n        {!errorMessage && (\n          <>\n            {sortedPhones.length > perPage && (\n              <h2 className=\"subtitle\">\n                {`Phones from ${firstVisibleIndex} to ${firstVisibleIndex + perPage - 1}`}\n              </h2>\n            )}\n\n            <Search\n              filterQuery={filterQuery}\n              setFilterQuery={setFilterQuery}\n            />\n            <DataTable\n              phones={paginatedPhones}\n              allPhones={phones}\n              columnConfig={columnConfig}\n              isSelectedAll={isSelectedAll}\n              sortReverse={sortReverse}\n              onSelectionChanged={onSelectionChanged}\n              onSort={onSort}\n              setPhones={setPhones}\n            />\n            <Pagination\n              total={sortedPhones.length}\n              perPage={perPage}\n              page={actualPage}\n              changeActualPage={changeActualPage}\n              setPerPage={setPerPage}\n            />\n          </>\n        )}\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}